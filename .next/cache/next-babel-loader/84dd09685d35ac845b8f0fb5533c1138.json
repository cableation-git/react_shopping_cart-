{"ast":null,"code":"import Order from \"../../models/Order\";\nimport jwt from \"jsonwebtoken\";\nimport connectDb from \"../../utils/connectDb\";\nconnectDb();\nexport default (async (req, res) => {\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const orders = await Order.find({\n      user: userId\n    }).sort({\n      createdAt: \"desc\"\n    }).populate({\n      path: \"products.product\",\n      model: \"Product\"\n    });\n    res.status(200).json({\n      orders\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(403).send(\"Please login again\");\n  }\n});","map":{"version":3,"sources":["c:\\webroots\\react-reserve\\pages\\api\\orders.js"],"names":["Order","jwt","connectDb","req","res","userId","verify","headers","authorization","process","env","JWT_SECRET","orders","find","user","sort","createdAt","populate","path","model","status","json","error","console","send"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAEAA,SAAS;AAET,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAaJ,GAAG,CAACK,MAAJ,CACjBH,GAAG,CAACI,OAAJ,CAAYC,aADK,EAEjBC,OAAO,CAACC,GAAR,CAAYC,UAFK,CAAnB;AAIA,UAAMC,MAAM,GAAG,MAAMZ,KAAK,CAACa,IAAN,CAAW;AAAEC,MAAAA,IAAI,EAAET;AAAR,KAAX,EACpBU,IADoB,CACf;AAAEC,MAAAA,SAAS,EAAE;AAAb,KADe,EAEpBC,QAFoB,CAEX;AACRC,MAAAA,IAAI,EAAE,kBADE;AAERC,MAAAA,KAAK,EAAE;AAFC,KAFW,CAArB;AAMAf,IAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAET,MAAAA;AAAF,KAArB;AACD,GAZD,CAYE,OAAOU,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACAlB,IAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB,oBAArB;AACD;AACF,CAjBD","sourcesContent":["import Order from \"../../models/Order\";\nimport jwt from \"jsonwebtoken\";\nimport connectDb from \"../../utils/connectDb\";\n\nconnectDb();\n\nexport default async (req, res) => {\n  try {\n    const { userId } = jwt.verify(\n      req.headers.authorization,\n      process.env.JWT_SECRET\n    );\n    const orders = await Order.find({ user: userId })\n    .sort({ createdAt: \"desc\" })\n    .populate({\n      path: \"products.product\",\n      model: \"Product\"\n    });\n    res.status(200).json({ orders });\n  } catch (error) {\n    console.error(error);\n    res.status(403).send(\"Please login again\");\n  }\n};\n"]},"metadata":{},"sourceType":"module"}